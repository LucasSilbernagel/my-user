{"version":3,"sources":["Components/Header.js","Components/Form.js","Components/Modal.js","Components/firebase.js","Components/Persona.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Form","handleSubmit","firebase","database","ref","push","state","setState","emoji","name","age","region","occupation","education","tech","wants","problems","challenges","other","addEmoji","e","native","handleUserInput","event","value","target","action","onSubmit","this","autocomplete","htmlFor","type","id","defaultValue","onChange","placeholder","required","readOnly","style","width","title","include","skinEmoji","onSelect","Modal","props","toggleModal","refContainer","useRef","escFunction","useCallback","keyCode","useEffect","document","addEventListener","body","overflow","current","focus","removeEventListener","aria-label","tabIndex","onClick","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Persona","personaId","remove","user","Main","prevState","open","personas","userInput","on","result","data","val","personasArray","key","persona","map","savedPersona","window","print","Footer","href","rel","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b20350e.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header>\n        <div className=\"wrapper\">\n          <h1>MyUser</h1>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header;","import React from \"react\";\nimport firebase from \"firebase\"\nimport 'emoji-mart/css/emoji-mart.css'\nimport { Picker } from 'emoji-mart'\n\nexport default class Form extends React.Component {\n  constructor() {\n    super()\n    this.state = {}\n  }\n\n  // On form submit\n  handleSubmit = () => {\n    // push user input values to firebase\n    const dbRef = firebase.database().ref()\n      dbRef.push(this.state)\n      this.setState({\n        emoji: this.state.emoji,\n        name: this.state.name,\n        age: this.state.age,\n        region: this.state.region,\n        occupation: this.state.occupation,\n        education: this.state.education,\n        tech: this.state.tech,\n        wants: this.state.wants,\n        problems: this.state.challenges,\n        other: this.state.other\n      })\n  }\n\n  // Allow user to select and add an emoji to represent user persona\n  addEmoji = e => {\n    let emoji = e.native;\n    this.setState({\n      emoji: emoji\n    });\n  };\n\n  handleUserInput = (event) => {\n    // Take event.target.value (what the user inputs)\n    // Put it into this.state\n    const value = event.target.value;\n    this.setState({\n      ...this.state,\n      [event.target.name]: value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"form-container\">\n\n        {/* The form that renders inside the modal */}\n        <form action=\"#\" onSubmit={this.handleSubmit} autocomplete=\"off\">\n          <fieldset>\n            <legend className=\"sr-only\">Form to create a user persona</legend>\n\n            {/* Name */}\n            <label htmlFor=\"name\">Name:</label>\n            <input type=\"text\" name=\"name\" id=\"name\" defaultValue={this.state.name} onChange={this.handleUserInput} placeholder=\"Taylor Smith\" required />\n\n            {/* Age */}\n            <label htmlFor=\"age\">Age:</label>\n            <select name=\"age\" id=\"age\" required value={this.state.age} onChange={this.handleUserInput}>\n              <option value=\"\">Please choose an option</option>\n              <option value=\"0 to 8\">0 to 8</option>\n              <option value=\"9 to 12\">9 to 12</option>\n              <option value=\"13 to 19\">13 to 19</option>\n              <option value=\"20 to 35\">20 to 35</option>\n              <option value=\"36 to 55\">36 to 55</option>\n              <option value=\"56 and older\">56 and older</option>\n            </select>\n\n            {/* Region */}\n            <label htmlFor=\"region\">Region:</label>\n            <input type=\"text\" name=\"region\" id=\"region\" placeholder=\"Ontario\" required defaultValue={this.state.region} onChange={this.handleUserInput} />\n\n            {/* Occupation */}\n            <label htmlFor=\"occupation\">Occupation:</label>\n            <input type=\"text\" name=\"occupation\" id=\"occupation\" placeholder=\"Student\" required defaultValue={this.state.occupation} onChange={this.handleUserInput} />\n\n            {/* Education */}\n            <label htmlFor=\"education\">Education:</label>\n            <select name=\"education\" id=\"education\" required value={this.state.education} onChange={this.handleUserInput}>\n              <option value=\"\">Please choose an option</option>\n              <option value=\"Less than high school\">Less than high school</option>\n              <option value=\"High school\">High school</option>\n              <option value=\"College or vocational school\">College or vocational school</option>\n              <option value=\"University degree\">University degree</option>\n              <option value=\"Master's degree or other graduate school degree\">Master's degree or other graduate school degree</option>\n              <option value=\"PhD, M.D., or other doctoral degree\">PhD, M.D., or other doctoral degree</option>\n            </select>\n\n            {/* Level of comfort with modern technology */}\n            <label htmlFor=\"tech\">Comfort level with modern technology (internet, computers, mobile devices, etc.):</label>\n            <select name=\"tech\" id=\"tech\" required value={this.state.tech} onChange={this.handleUserInput}>\n              <option value=\"\">Please choose an option</option>\n              <option value=\"Not at all comfortable\">Not at all comfortable</option>\n              <option value=\"A little bit comfortable\">A little bit comfortable</option>\n              <option value=\"Somewhat comfortable\">Somewhat comfortable</option>\n              <option value=\"Very comfortable\">Very comfortable</option>\n            </select>\n\n            {/* Wants */}\n            <label htmlFor=\"wants\">Wants:</label>\n            <textarea name=\"wants\" id=\"wants\" placeholder=\"To learn how to code, to find great recipes, etc.\" value={this.state.wants} onChange={this.handleUserInput} />\n\n            {/* Challenges */}\n            <label htmlFor=\"challenges\">Challenges:</label>\n            <textarea name=\"challenges\" id=\"challenges\" placeholder=\"Disability, slow internet, etc.\" value={this.state.challenges} onChange={this.handleUserInput} />\n\n            {/* Other information */}\n            <label htmlFor=\"other\">Other information:</label>\n            <textarea name=\"other\" id=\"other\" placeholder=\"Social networks, preferred method of communication, favourite colour, etc.\" value={this.state.other} onChange={this.handleUserInput} />\n\n            {/* Emoji */}\n            <label htmlFor=\"emoji\" className=\"sr-only\">Choose an emoji below to represent your user persona!</label>\n            <textarea readOnly className=\"emoji-input\" name=\"emoji\" id=\"emoji\" value={this.state.emoji} onChange={this.addEmoji} placeholder=\"Choose an emoji below to represent your user persona!\"/>\n            <span>\n              <Picker style={{ width: '300px' }} title=\"MyUser Emoji\" emoji='juggling' include='people' skinEmoji=\"bald_man\"  onSelect={this.addEmoji} />\n            </span>\n\n            <div className=\"center-button\">\n            {/* Button to submit form */}\n              <button className=\"save-button\" type=\"submit\" name=\"submit\">Save User Persona</button>\n            </div>\n\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}","import React, { useCallback, useEffect, useRef } from 'react'\nimport Form from \"./Form\"\nimport FocusTrap from 'focus-trap-react';\n\nexport default function Modal(props) {\n\n  const { toggleModal } = props;\n\n  // Create ref to target \"close\" button when modal opens\n  const refContainer = useRef(null);\n  \n  // Function to close modal when esc button is pressed\n  const escFunction = useCallback((event) => {\n    if(event.keyCode === 27) {\n      toggleModal();\n    }\n  }, [toggleModal]);\n\n  useEffect(() => {\n\n    // Event listener for esc button press\n    document.addEventListener(\"keydown\", escFunction, false);\n\n    // When modal opens, prevent the background from scrolling\n    document.body.style.overflow = 'hidden';\n\n    // Focus on button when modal opens\n    refContainer.current.focus();\n\n    return () => {\n      // Remove event listener for esc button press after modal closes\n      document.removeEventListener(\"keydown\", escFunction, false);\n\n      // While modal is closed, allow page to scroll\n      document.body.style.overflow = 'unset';\n    };\n  }, [escFunction]);\n\n  return (\n    // FocusTrap to trap focus inside modal when open\n    <FocusTrap>\n    {/* // Modal contents: close button, form, modal overlay for background */}\n      <div className=\"modal-container\">\n        <div className=\"modal\">\n          <button ref={refContainer} className=\"close-modal\" aria-label=\"close form\" tabIndex=\"0\" onClick={toggleModal}>\n            &times;\n            </button>\n          <Form />\n        </div>\n        <div className=\"modal-overlay\" onClick={toggleModal}></div>\n      </div>\n    </FocusTrap>\n  );\n}","import firebase from 'firebase/app'\nimport 'firebase/database'\n\n// Initialize Firebase\nconst config = {\n  apiKey: \"AIzaSyB2ad53R7n146eY70wpxPvFDgOYbM7E8oA\",\n  authDomain: \"my-user-1a244.firebaseapp.com\",\n  databaseURL: \"https://my-user-1a244.firebaseio.com\",\n  projectId: \"my-user-1a244\",\n  storageBucket: \"my-user-1a244.appspot.com\",\n  messagingSenderId: \"369192256471\",\n  appId: \"1:369192256471:web:17e4c189e8009246a34192\"\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react'\nimport firebase from './firebase'\n\nfunction Persona(props) {\n\n  // Delete persona when close button is clicked\n  const deleteItem = () => {\n    const itemRef = firebase.database().ref(props.personaId)\n    itemRef.remove()\n  }\n\n  // Add each new persona to the list on the page\n  return (\n    <div className=\"persona-container\">\n      <button className=\"delete-item\" aria-label=\"delete persona\" onClick={deleteItem}>&times;</button>\n      <ul className=\"created-persona\">\n        <li className=\"emoji-li\">{props.user.emoji}</li>\n        <li><span className=\"bold\">Name:</span> {props.user.name}</li>\n        <li><span className=\"bold\">Age:</span> {props.user.age}</li>\n        <li><span className=\"bold\">Region:</span> {props.user.region}</li>\n        <li><span className=\"bold\">Occupation:</span> {props.user.occupation}</li>\n        <li><span className=\"bold\">Education:</span> {props.user.education}</li>\n        <li><span className=\"bold\">Comfort level with modern technology (internet, computers, mobile devices, etc.):</span> {props.user.tech}</li>\n        <li><span className=\"bold\">Wants:</span> {props.user.wants}</li>\n        <li><span className=\"bold\">Challenges:</span> {props.user.challenges}</li>\n        <li><span className=\"bold\">Other:</span> {props.user.other}</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Persona","import React from \"react\";\nimport Modal from \"./Modal\";\nimport Persona from \"./Persona\"\nimport firebase from \"firebase\"\n\nclass Main extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      open: false,\n      personas: [],\n      userInput: \"\"\n    }\n  }\n\n  // Function to open/close modal\n  toggleModal = () => {\n    this.setState(prevState => ({\n      open: !prevState.open\n    }));\n  };\n\n  componentDidMount() {\n\n    // grab the list of personas from database\n    // set up listener to firebase database\n    const dbRef = firebase.database().ref();\n\n    // Put new data into the data variable\n    dbRef.on('value', (result) => {\n      const data = result.val();\n      // Turn data from an object into an array\n      const personasArray = []\n      for (let key in data) {\n        personasArray.push({persona: data[key], personaId: key})\n      }\n      // Set the state of personas\n      this.setState({\n        personas: personasArray\n      })\n    })\n  }\n\n  render() {\n\n    // Modal constants\n    const { open } = this.state;\n    const { toggleModal } = this;\n\n    return (\n      <main>\n          <div className=\"wrapper\">\n            <p>User personas are semi-fictional characters that represent your customers or product users, ideally based on real research and data. Create a user persona for one or more of your users, or look at others that have been created below! This will help you to think about the unique needs of your users and build or improve products to meet those needs.</p>\n            \n            {/* Button to show modal */}\n            <button\n              className=\"landing-button\"\n              onClick={toggleModal}\n            >\n              Create User Persona\n            </button>\n            {open && <Modal toggleModal={toggleModal} />}\n\n            <ul>\n              {/* Saved user personas go here */}\n              {/* Map over the personas array and add the new persona */}\n              {this.state.personas.map((savedPersona) => {\n              return (\n                <Persona key={savedPersona.personaId} personaId={savedPersona.personaId} user={savedPersona.persona} />\n              )\n              })}\n            </ul>\n\n            {/* Button to print or download */}\n            <button className=\"landing-button\" onClick={window.print}>Print or Download</button>\n\n          </div>\n        </main>\n    )\n  }\n}\n\nexport default Main;","import React from \"react\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer>\n        <div className=\"wrapper\">\n          <p>Built by <a href=\"https://lucassilbernagel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Lucas Silbernagel</a></p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer;","import React from \"react\";\nimport Header from \"./Components/Header\"\nimport Main from \"./Components/Main\"\nimport \"./App.scss\";\nimport Footer from \"./Components/Footer\"\nclass App extends React.Component {\n\n  render() {\n\n    return (\n      <React.Fragment>\n\n        {/* Header */}\n        <Header />\n\n        {/* Main section */}\n        <Main />\n\n        {/* Footer */}\n        <Footer />\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}